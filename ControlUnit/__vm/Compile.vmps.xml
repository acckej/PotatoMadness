<VisualMicro>
  <Program Name="ControlUnit" Ext=".ino" Location="C:\src\PotatoMadness\ControlUnit\ControlUnit">
    <Compile IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\Acckej\AppData\Local\Temp\VMBuilds\ControlUnit\mega_atmega2560\Debug" IsDebugStart="1" ReCompileIfSourceIsNewer="1" SketchName="ControlUnit" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;VM_DEBUG_AUTO_REPORTING;VM_DEBUG_READ_DIGITAL_PORTS 1;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="mega_atmega2560" Description="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\Acckej\Documents\Arduino" name="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" vid.0="0x2341" pid.0="0x0010" vid.1="0x2341" pid.1="0x0042" vid.2="0x2A03" pid.2="0x0010" vid.3="0x2A03" pid.3="0x0042" vid.4="0x2341" pid.4="0x0210" vid.5="0x2341" pid.5="0x0242" upload.tool="avrdude" upload.maximum_data_size="8192" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" build.board="AVR_MEGA2560" menu.cpu.atmega2560="ATmega2560 (Mega 2560)" menu.cpu.atmega2560.upload.protocol="wiring" menu.cpu.atmega2560.upload.maximum_size="253952" menu.cpu.atmega2560.upload.speed="115200" menu.cpu.atmega2560.bootloader.high_fuses="0xD8" menu.cpu.atmega2560.bootloader.extended_fuses="0xFD" menu.cpu.atmega2560.bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" menu.cpu.atmega2560.build.mcu="atmega2560" menu.cpu.atmega2560.build.board="AVR_MEGA2560" menu.cpu.atmega1280="ATmega1280" menu.cpu.atmega1280.upload.protocol="arduino" menu.cpu.atmega1280.upload.maximum_size="126976" menu.cpu.atmega1280.upload.speed="57600" menu.cpu.atmega1280.bootloader.high_fuses="0xDA" menu.cpu.atmega1280.bootloader.extended_fuses="0xF5" menu.cpu.atmega1280.bootloader.file="atmega/ATmegaBOOT_168_atmega1280.hex" menu.cpu.atmega1280.build.mcu="atmega1280" menu.cpu.atmega1280.build.board="AVR_MEGA" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="10803" target_package="arduino" target_platform="avr" runtime.hardware.path="C:\Program Files (x86)\Arduino\hardware\arduino" originalid="mega" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}avr\include\;{intellisense.tools.path}avr\include\avr\;{intellisense.tools.path}lib\gcc\avr\4.8.1\include;{intellisense.tools.path}lib\gcc\avr\4.9.2\include;{intellisense.tools.path}lib\gcc\avr\4.9.3\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" version="1.6.19" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="&quot;{network_cmd}&quot; -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\hmm5bhw5.c2x\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" jtag3isp.name="Atmel JTAGICE3 (ISP mode)" jtag3isp.communication="usb" jtag3isp.protocol="jtag3isp" jtag3isp.program.protocol="jtag3isp" jtag3isp.program.tool="avrdude" jtag3isp.program.extra_params="" jtag3.name="Atmel JTAGICE3 (JTAG mode)" jtag3.communication="usb" jtag3.protocol="jtag3" jtag3.program.protocol="jtag3" jtag3.program.tool="avrdude" jtag3.program.extra_params="-B0.1" atmel_ice.name="Atmel-ICE (AVR)" atmel_ice.communication="usb" atmel_ice.protocol="atmelice_isp" atmel_ice.program.protocol="atmelice_isp" atmel_ice.program.tool="avrdude" atmel_ice.program.extra_params="-Pusb" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.4-arduino2.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.tools-avr.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino9.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.1.1.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" upload.protocol="wiring" upload.maximum_size="253952" upload.speed="115200" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" build.mcu="atmega2560" runtime.vm.boardinfo.id="mega_atmega2560" runtime.vm.boardinfo.name="mega_atmega2560" runtime.vm.boardinfo.desc="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" runtime.vm.boardinfo.src_location="C:\Program Files (x86)\Arduino\hardware\arduino\avr" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.9.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.appid="arduino16x" location.sketchbook="C:\Users\Acckej\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" vm.runtime.compiler.shared_project_paths="C:\src\PotatoMadness\ControlUnit\CommonLogic" builder.noino="false" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" build.variant.vmresolved.name="mega" build.variant.vmresolved.full_path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM3" serial.port="COM3" serial.port.num="3" extra.time.local="1524787951" extra.time.utc="1524777151" extra.time.dst="10800" extra.time.zone="-10800" build.path="C:\Users\Acckej\AppData\Local\Temp\VMBuilds\ControlUnit\mega_atmega2560\Debug" build.project_name="ControlUnit.ino" build.project_path="C:\src\PotatoMadness\ControlUnit\ControlUnit" sketch_path="C:\src\PotatoMadness\ControlUnit\ControlUnit" ProjectDir="C:\src\PotatoMadness\ControlUnit\ControlUnit\" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\Acckej\AppData\Local\Temp\VMBuilds\ControlUnit\mega_atmega2560\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" AutoReportDigitalPins="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="HwChecksTest_ButtonsLoader.cpp, line 39" Id="42e6eb3e-3b19-4b49-a6c2-722c18ab94ec" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\hwcheckstest_buttonsloader.cpp" FileLine="39" FileColumn="1" FunctionName="TEST_METHOD(HwChecksSequenceTest_Buttons)" FunctionLineOffset="17" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='42e6eb3e-3b19-4b49-a6c2-722c18ab94ec'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>32				checks[0] = bc;
33				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
34				auto context = Context(&amp;wrapper, &amp;buttons, &amp;loader, &amp;actuators, &amp;sensors, nullptr);
35	
36				_stopButtonsTest = false;			
37				_buttonsPort = 0;
38	
--&gt;39				auto seq = HwCheckSequence(&amp;wrapper, checks, 1);
40	
41				for (auto i = 0; i &lt; 10; i++)
42				{
43					seq.Run();
44	
45					_buttonsPort = BTN1_PORT;
46					seq.Run();
47	
48					_buttonsPort = BTN2_PORT;
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="HwChecksTest_ButtonsLoader.cpp, line 74" Id="18267345-88b0-478b-abb1-287dd28c3fcb" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\hwcheckstest_buttonsloader.cpp" FileLine="74" FileColumn="1" FunctionName="TEST_METHOD(HwChecksSequenceTest_Loader)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='18267345-88b0-478b-abb1-287dd28c3fcb'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>67				seq.Run();
68	
69				delete bc;
70			}
71	
72			TEST_METHOD(HwChecksSequenceTest_Loader)
73			{
--&gt;74				auto wrapper = ArduinoStub(DigitalReadLoader, DigitalWriteLoader, AnalogReadLoader);
75				auto screen = TestScreen(&amp;wrapper);
76				auto loader = Loader(&amp;wrapper);
77				auto actuators = Actuators(&amp;wrapper);
78				auto sensors = Sensors(&amp;wrapper);
79	
80				IHwCheck* checks[1];
81				auto bc = new LoaderCheck(&amp;wrapper, &amp;screen, &amp;loader);
82				checks[0] = bc;
83				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="HwChecksTest_DrivesPower.cpp, line 20" Id="b4dd9e2d-d6c7-4481-826c-3f8fd9dcd7dd" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\hwcheckstest_drivespower.cpp" FileLine="20" FileColumn="1" FunctionName="TEST_CLASS(HardwareChecksTest_DrivesPower)" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b4dd9e2d-d6c7-4481-826c-3f8fd9dcd7dd'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>13	namespace ControlUnitUnitTests
14	{
15		TEST_CLASS(HardwareChecksTest_DrivesPower)
16		{
17		public:
18	
19			TEST_METHOD(HwChecksSequenceTest_Power)
--&gt;20			{
21				auto wrapper = ArduinoStub(nullptr, nullptr, AnalogReadLoader);
22				auto screen = TestScreen(&amp;wrapper);
23				auto loader = Loader(&amp;wrapper);
24				auto actuators = Actuators(&amp;wrapper);
25				auto sensors = Sensors(&amp;wrapper);
26	
27				IHwCheck* checks[1];
28				auto bc = new BatteryCheck(&amp;wrapper, &amp;screen, &amp;sensors);
29				checks[0] = bc;
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="HwChecksTest_DrivesPower.cpp, line 43" Id="0133b967-5d01-4181-9e40-27a5672b8228" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\hwcheckstest_drivespower.cpp" FileLine="43" FileColumn="1" FunctionName="TEST_CLASS(HardwareChecksTest_DrivesPower)" FunctionLineOffset="28" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='0133b967-5d01-4181-9e40-27a5672b8228'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>36				{
37					auto res = seq.Run();
38					Assert::AreNotEqual(static_cast&lt;int&gt;(Failed), int(res));
39				}
40	
41				delete bc;
42			}	
--&gt;43			
44			TEST_METHOD(HwChecksSequenceTest_Drives)
45			{
46				auto wrapper = ArduinoStub(nullptr, DigitalWriteDrives, nullptr);
47				auto screen = TestScreen(&amp;wrapper);
48				auto loader = Loader(&amp;wrapper);
49				auto actuators = Actuators(&amp;wrapper);
50				auto sensors = Sensors(&amp;wrapper);
51	
52				IHwCheck* checks[1];
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="ConfigurationScreenTest.cpp, line 53" Id="85fb4fac-a010-4545-aa9e-d5b2a9210dff" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\configurationscreentest.cpp" FileLine="53" FileColumn="1" FunctionName="TEST_METHOD(ScrollScreenDownTest)" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='85fb4fac-a010-4545-aa9e-d5b2a9210dff'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>46				auto wrapper = ArduinoStub(DigitalReadButtonsScrollDown, nullptr);
47				auto screen = ScrollableScreen(&amp;wrapper);
48				auto storage = ConfigurationValueStorage(&amp;wrapper);
49				auto confScreen = ConfigurationScreen(&amp;wrapper, &amp;storage);
50				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
51				auto context = Context(&amp;wrapper, &amp;buttons, nullptr, nullptr, nullptr, &amp;storage);
52	
--&gt;53				storage.Load();			
54	
55				for (auto i = 0; i &lt; 200; i++)
56				{
57					confScreen.Draw();
58	
59					wrapper.Delay(100);
60				}
61			}
62	
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="ConfigurationScreenTest.cpp, line 72" Id="cfcc384f-fabc-4eb6-9a1d-caccc26c23d3" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\configurationscreentest.cpp" FileLine="72" FileColumn="1" FunctionName="TEST_METHOD(IncreaseValueTest)" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='cfcc384f-fabc-4eb6-9a1d-caccc26c23d3'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>65				auto wrapper = ArduinoStub(DigitalReadButtonsIncreaseValue, nullptr);
66				auto screen = ScrollableScreen(&amp;wrapper);
67				auto storage = ConfigurationValueStorage(&amp;wrapper);
68				auto confScreen = ConfigurationScreen(&amp;wrapper, &amp;storage);
69				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
70				auto context = Context(&amp;wrapper, &amp;buttons, nullptr, nullptr, nullptr, &amp;storage);
71	
--&gt;72				storage.Load();
73				_increaseValueTestGo = false;
74				confScreen.Draw();
75				_increaseValueTestGo = true;
76	
77				for (auto i = 0; i &lt; 100; i++)
78				{
79					confScreen.Draw();
80	
81					wrapper.Delay(100);
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="ConfigurationScreenTest.cpp, line 83" Id="6b282ec9-67d3-44eb-8c6a-94363cefe5da" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\configurationscreentest.cpp" FileLine="83" FileColumn="1" FunctionName="TEST_METHOD(IncreaseValueTest)" FunctionLineOffset="20" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6b282ec9-67d3-44eb-8c6a-94363cefe5da'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>76	
77				for (auto i = 0; i &lt; 100; i++)
78				{
79					confScreen.Draw();
80	
81					wrapper.Delay(100);
82				}
--&gt;83			}
84	
85			TEST_METHOD(DecreaseValueTest)
86			{
87				auto wrapper = ArduinoStub(DigitalReadButtonsDecreaseValue, nullptr);
88				auto screen = ScrollableScreen(&amp;wrapper);
89				auto storage = ConfigurationValueStorage(&amp;wrapper);
90				auto confScreen = ConfigurationScreen(&amp;wrapper, &amp;storage);
91				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
92				auto context = Context(&amp;wrapper, &amp;buttons, nullptr, nullptr, nullptr, &amp;storage);
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="ConfigurationScreenTest.cpp, line 94" Id="c377bf86-d704-466a-bcf0-58dc9f7fd824" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\configurationscreentest.cpp" FileLine="94" FileColumn="1" FunctionName="TEST_METHOD(DecreaseValueTest)" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c377bf86-d704-466a-bcf0-58dc9f7fd824'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>87				auto wrapper = ArduinoStub(DigitalReadButtonsDecreaseValue, nullptr);
88				auto screen = ScrollableScreen(&amp;wrapper);
89				auto storage = ConfigurationValueStorage(&amp;wrapper);
90				auto confScreen = ConfigurationScreen(&amp;wrapper, &amp;storage);
91				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
92				auto context = Context(&amp;wrapper, &amp;buttons, nullptr, nullptr, nullptr, &amp;storage);
93	
--&gt;94				storage.Load();
95				_decreaseValueTestGo = false;
96				confScreen.Draw();
97				_decreaseValueTestGo = true;
98	
99				for (auto i = 0; i &lt; 100; i++)
100				{
101					confScreen.Draw();
102	
103					wrapper.Delay(100);
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="ConfigurationScreenTest.cpp, line 105" Id="ee8ef811-b307-469e-9a36-386c2c3eeaf6" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\configurationscreentest.cpp" FileLine="105" FileColumn="1" FunctionName="TEST_METHOD(DecreaseValueTest)" FunctionLineOffset="20" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ee8ef811-b307-469e-9a36-386c2c3eeaf6'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>98	
99				for (auto i = 0; i &lt; 100; i++)
100				{
101					confScreen.Draw();
102	
103					wrapper.Delay(100);
104				}
--&gt;105			}
106	
107			TEST_METHOD(ScrollScreenUpDownTest)
108			{
109				auto wrapper = ArduinoStub(DigitalReadButtonsScrollUpDown, nullptr);
110				auto screen = ScrollableScreen(&amp;wrapper);
111				auto storage = ConfigurationValueStorage(&amp;wrapper);
112				auto confScreen = ConfigurationScreen(&amp;wrapper, &amp;storage);
113				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
114				auto context = Context(&amp;wrapper, &amp;buttons, nullptr, nullptr, nullptr, &amp;storage);
</Source>
      </BreakPoint>
      <BreakPoint Index="10" Name="ConfigurationScreenTest.cpp, line 109" Id="c299ab4b-7e66-4b16-806f-edd973c9c4d7" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\configurationscreentest.cpp" FileLine="109" FileColumn="1" FunctionName="TEST_METHOD(ScrollScreenUpDownTest)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c299ab4b-7e66-4b16-806f-edd973c9c4d7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>102	
103					wrapper.Delay(100);
104				}
105			}
106	
107			TEST_METHOD(ScrollScreenUpDownTest)
108			{
--&gt;109				auto wrapper = ArduinoStub(DigitalReadButtonsScrollUpDown, nullptr);
110				auto screen = ScrollableScreen(&amp;wrapper);
111				auto storage = ConfigurationValueStorage(&amp;wrapper);
112				auto confScreen = ConfigurationScreen(&amp;wrapper, &amp;storage);
113				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
114				auto context = Context(&amp;wrapper, &amp;buttons, nullptr, nullptr, nullptr, &amp;storage);
115	
116				storage.Load();
117				_scrollUp = false;
118	
</Source>
      </BreakPoint>
      <BreakPoint Index="11" Name="ConfigurationScreenTest.cpp, line 126" Id="8c0f8a8e-854b-466d-b673-de303b098624" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\configurationscreentest.cpp" FileLine="126" FileColumn="1" FunctionName="TEST_METHOD(ScrollScreenUpDownTest)" FunctionLineOffset="19" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='8c0f8a8e-854b-466d-b673-de303b098624'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>119				for (auto i = 0; i &lt; 400; i++)
120				{
121					confScreen.Draw();
122	
123					wrapper.Delay(100);
124				}
125	
--&gt;126				_scrollUp = true;
127	
128				for (auto i = 0; i &lt; 400; i++)
129				{
130					confScreen.Draw();
131	
132					wrapper.Delay(100);
133				}
134			}
135	
</Source>
      </BreakPoint>
      <BreakPoint Index="12" Name="FiringActionsTest.cpp, line 32" Id="ffa141bf-ff0a-4a3c-a819-29bc6f14fb9c" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\controlunit.unittests\firingactionstest.cpp" FileLine="32" FileColumn="1" FunctionName="TEST_METHOD(LoaderForwardActionTest)" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ffa141bf-ff0a-4a3c-a819-29bc6f14fb9c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>25				//auto storage = ConfigurationValueStorage(&amp;wrapper);
26				auto loader = Loader(&amp;wrapper);
27				auto actuators = Actuators(&amp;wrapper);
28				auto sensors = Sensors(&amp;wrapper);
29				auto buttons = ButtonsController(&amp;wrapper, nullptr, 0);
30				auto context = Context(&amp;wrapper, &amp;buttons, &amp;loader, &amp;actuators, &amp;sensors, frame-&gt;GetConfiguration());
31	
--&gt;32				auto mainSequence = MainSequence(&amp;wrapper);
33	
34				for (auto i = 0; i &lt; 6000; i++)
35				{
36					auto systemState = mainSequence.Run();
37					context.SetState(systemState);
38					wrapper.Delay(100);
39					frame-&gt;IncrementFrame();
40				}
41			}
</Source>
      </BreakPoint>
      <BreakPoint Index="13" Name="LoaderForwardAction.cpp, line 76" Id="10c28cd3-9077-45d4-b5bf-5342efae64ec" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\src\potatomadness\controlunit\commonlogic\loaderforwardaction.cpp" FileLine="76" FileColumn="1" FunctionName="Execute()" FunctionLineOffset="23" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='464ed35a-d665-4f38-85a4-e48e75c9e942'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>69	
70		auto time = _wrapper-&gt;GetMilliseconds();
71	
72		auto duration = time - _startTime;
73	
74		if(duration &gt; LOADER_FORWARD_TIME)
75		{
--&gt;76			Stop();
77			_errorCode = LoaderForwardTimeout;
78			return Error;
79		}
80	
81		if(duration &gt; _config -&gt;GetLoaderForwardFanTime())
82		{
83			_actuators-&gt;TurnFanOff();
84		}
85	
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>